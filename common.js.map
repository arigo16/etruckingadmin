{"version":3,"sources":["webpack:///./src/app/directive/numberOnly.directive.ts","webpack:///./src/app/directive/numberOnly.module.ts","webpack:///./src/app/guard/guard-auth.guard.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAoE;AAEpE;IAUI,6BAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;QANlC,4CAA4C;QACpC,UAAK,GAAW,IAAI,MAAM,CAAC,4BAA4B,CAAC,CAAC;QACjE,gDAAgD;QAChD,4BAA4B;QACpB,gBAAW,GAAkB,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAGzE,CAAC;IAED,uCAAS,GADT,UACU,KAAoB;QAC1B,2CAA2C;QAC3C,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC5C,OAAO;SACV;QACD,IAAI,OAAO,GAAW,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC;QAClD,IAAI,IAAI,GAAW,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACzC,KAAK,CAAC,cAAc,EAAE,CAAC;SAC1B;IACL,CAAC;IACL,0BAAC;AAAD,CAAC;;;;;;;;;;;;;;ACvBD;AAAA;AAAA;IAAA;IAIgC,CAAC;IAAD,uBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACNjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AAClB;;;AAEnC;IAKE,mBACS,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IACnB,CAAC;IAEL,+BAAW,GAAX;QACE,IAAI,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC/B,IAAI,KAAK,GAAG,6CAAU,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,iBAAiB,CAAC;YAC9E,IAAI,cAAc,GAAG,KAAK,CAAC,QAAQ,CAAC,6CAAU,CAAC,IAAI,CAAC;YACpD,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC5C,IAAI,WAAW,IAAI,IAAI,EAAE;gBACvB,OAAO,IAAI;aACZ;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAChC,OAAO,KAAK;aACb;SACF;aAAM,IAAI,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxC,IAAI,KAAK,GAAG,6CAAU,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,iBAAiB,CAAC;YAChF,IAAI,cAAc,GAAG,KAAK,CAAC,QAAQ,CAAC,6CAAU,CAAC,IAAI,CAAC;YACpD,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC5C,IAAI,WAAW,IAAI,IAAI,EAAE;gBACvB,OAAO,IAAI;aACZ;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAChC,OAAO,KAAK;aACb;SACF;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;IACd,CAAC;;oBArCH;CAsCC;AA/BqB","file":"common.js","sourcesContent":["import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[myNumberOnly]'\r\n})\r\nexport class NumberOnlyDirective {\r\n    // Allow decimal numbers and negative values\r\n    private regex: RegExp = new RegExp(/^-?[0-9]+(\\.[0-9]*){0,1}$/g);\r\n    // Allow key codes for special events. Reflect :\r\n    // Backspace, tab, end, home\r\n    private specialKeys: Array<string> = ['Backspace', 'Tab', 'End', 'Home'];\r\n\r\n    constructor(private el: ElementRef) {\r\n    }\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        // Allow Backspace, tab, end, and home keys\r\n        if (this.specialKeys.indexOf(event.key) !== -1) {\r\n            return;\r\n        }\r\n        let current: string = this.el.nativeElement.value;\r\n        let next: string = current.concat(event.key);\r\n        if (next && !String(next).match(this.regex)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n}","import { NgModule } from \"@angular/core\"\r\nimport { NumberOnlyDirective } from \"./numberOnly.directive\"\r\n\r\n@NgModule({\r\n    declarations: [NumberOnlyDirective],\r\n    exports: [NumberOnlyDirective]\r\n})\r\nexport class NumberOnlyModule { }","import { Injectable } from '@angular/core'\nimport { CanActivate, Router } from '@angular/router'\nimport * as crypto from 'crypto-js'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    public router: Router\n  ) { }\n\n  canActivate() {\n    if (localStorage.getItem('cva')) {\n      var bytes = crypto.AES.decrypt(localStorage.getItem('cva'), 'WilkaETruck2019')\n      var decryptProfile = bytes.toString(crypto.enc.Utf8)\n      var currentUser = JSON.parse(decryptProfile)\n      if (currentUser != null) {\n        return true\n      } else {\n        this.router.navigate(['/login'])\n        return false\n      }\n    } else if (sessionStorage.getItem('cva')) {\n      var bytes = crypto.AES.decrypt(sessionStorage.getItem('cva'), 'WilkaETruck2019')\n      var decryptProfile = bytes.toString(crypto.enc.Utf8)\n      var currentUser = JSON.parse(decryptProfile)\n      if (currentUser != null) {\n        return true\n      } else {\n        this.router.navigate(['/login'])\n        return false\n      }\n    }\n    this.router.navigate(['/login'])\n    return false\n  }\n}\n"],"sourceRoot":""}